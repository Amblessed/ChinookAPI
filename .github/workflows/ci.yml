name: CI ChinookAPI + Pytest + Allure

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      POSTGRESQL_USERNAME: chinook
      POSTGRESQL_PASSWORD: chinook
      POSTGRESQL_DB: chinook_auto_increment
      CI: true

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: chinook
          POSTGRES_PASSWORD: chinook
          POSTGRES_DB: chinook_auto_increment
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U chinook"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Maven dependencies
        run: mvn clean install -DskipTests

      - name: Wait for Postgres to be ready
        run: |
          timeout=60
          start=$(date +%s)
          until psql -h localhost -U $POSTGRESQL_USERNAME -d $POSTGRESQL_DB -c "\q" 2>/dev/null; do
            now=$(date +%s)
            elapsed=$((now - start))
            if [ $elapsed -ge $timeout ]; then
              echo "Postgres did not become ready in time"
              exit 1
            fi
            sleep 2
          done

      - name: Load Chinook schema and data
        env:
          PGPASSWORD: ${{ env.POSTGRESQL_PASSWORD }}
        run: |
          psql -h localhost -U $POSTGRESQL_USERNAME -d $POSTGRESQL_DB -f src/main/resources/db/chinook.sql

      - name: Start Spring Boot
        run: |
          mvn spring-boot:run &
          SPRING_PID=$!
          echo $SPRING_PID > spring_pid.txt

      - name: Wait for Spring Boot
        run: |
          timeout=120
          start=$(date +%s)
          until curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/v1/customer | grep 200 >/dev/null; do
            now=$(date +%s)
            elapsed=$((now - start))
            if [ $elapsed -ge $timeout ]; then
              echo "Spring Boot did not start in time"
              kill $(cat spring_pid.txt)
              exit 1
            fi
            sleep 3
          done

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/test/python/requirements.txt
          pip install allure-pytest requests

      - name: Run Pytest with Allure
        run: |
          pytest src/test/python/test_spring_endpoints.py --alluredir=allure-results -v || true

      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.19.0/allure-2.19.0.zip -O allure.zip
          unzip allure.zip -d allure
          export PATH="$PWD/allure/bin:$PATH"

      - name: Generate Allure Report
        run: |
          allure generate allure-results --clean -o allure-report

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Stop Spring Boot
        if: always()
        run: |
          kill $(cat spring_pid.txt) || true
