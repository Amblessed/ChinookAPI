name: CI ChinookAPI + Pytest + Allure

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: windows-latest
    env:
      POSTGRESQL_USERNAME: chinook
      POSTGRESQL_PASSWORD: chinook
      POSTGRESQL_DB: chinook_auto_increment
      CI: true

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: chinook
          POSTGRES_PASSWORD: chinook
          POSTGRES_DB: chinook_auto_increment
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U chinook"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Maven dependencies
        shell: pwsh
        run: mvn clean install -DskipTests

      - name: Wait for Postgres to be ready
        shell: pwsh
        run: |
          $timeout = 60
          $start = Get-Date
          while ((psql -h localhost -U $env:POSTGRESQL_USERNAME -d $env:POSTGRESQL_DB -c "\q") -ne 0) {
              if ((Get-Date) - $start -gt (New-TimeSpan -Seconds $timeout)) {
                  throw "Postgres did not become ready in time"
              }
              Start-Sleep -Seconds 2
          }

      - name: Load Chinook schema and data
        shell: pwsh
        env:
          PGPASSWORD: ${{ env.POSTGRESQL_PASSWORD }}
        run: |
          psql -h localhost -U $env:POSTGRESQL_USERNAME -d $env:POSTGRESQL_DB -f src/main/resources/db/chinook.sql

      - name: Start Spring Boot
        shell: pwsh
        run: |
          Start-Process mvn -ArgumentList "spring-boot:run" -NoNewWindow

      - name: Wait for Spring Boot to respond
        shell: pwsh
        run: |
          $timeout = 120
          $start = Get-Date
          while ($true) {
              try {
                  $r = Invoke-WebRequest -Uri "http://localhost:8080/api/v1/customer" -UseBasicParsing
                  if ($r.StatusCode -eq 200) { break }
              } catch { }
              if ((Get-Date) - $start -gt (New-TimeSpan -Seconds $timeout)) { throw "Spring Boot did not start in time" }
              Start-Sleep -Seconds 3
          }

      - name: Install Python dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r src/test/requirements.txt
          pip install allure-pytest requests

      - name: Run Pytest with Allure
        shell: pwsh
        run: |
          pytest src/test/test_spring_endpoints.py --alluredir=allure-results -v || exit 0

      - name: Install Allure CLI
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://github.com/allure-framework/allure2/releases/download/2.19.0/allure-2.19.0.zip -OutFile allure.zip
          Expand-Archive allure.zip -DestinationPath allure
          $env:PATH += ";$PWD\allure\bin"

      - name: Generate Allure Report
        shell: pwsh
        run: |
          allure generate allure-results --clean -o allure-report

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report
